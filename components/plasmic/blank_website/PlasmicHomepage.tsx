// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tvwynAfQ8HvxBn14Wy9CDp
// Component: fToXGLxWr8Wk

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { useScreenVariants as useScreenVariantsuarjUj0RGmN } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: uarjUj0rGmN_/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: tvwynAfQ8HvxBn14Wy9CDp/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: fToXGLxWr8Wk/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: MLdecHJ30CPP/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  devynStack?: Flex__<"a"> & Partial<LinkProps>;
  igStack?: Flex__<"a"> & Partial<LinkProps>;
  twitterStack?: Flex__<"a"> & Partial<LinkProps>;
  linkedInStack?: Flex__<"a"> & Partial<LinkProps>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsuarjUj0RGmN()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicHomepage.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicHomepage.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicHomepage.pageMetadata.description}
        />
        <meta
          key="og:image"
          property="og:image"
          content={PlasmicHomepage.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicHomepage.pageMetadata.ogImageSrc}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox___8NljO)}>
            <div className={classNames(projectcss.all, sty.freeBox__gPkaY)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__xlluW)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"100px"}
                loading={"eager"}
                src={{
                  src: "/plasmic/blank_website/images/devynGreenHeroImage.png",
                  fullWidth: 3072,
                  fullHeight: 3072,
                  aspectRatio: undefined
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__aVkbr
                )}
              >
                {"@devynceo"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__c2Ph
                )}
              >
                {"Helping ordinary people achieve extraordinary growth."}
              </div>
            </div>
            <PlasmicLink__
              data-plasmic-name={"devynStack"}
              data-plasmic-override={overrides.devynStack}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.devynStack
              )}
              component={Link}
              href={"https://www.devyn.ai/"}
              platform={"nextjs"}
              target={"_blank"}
            >
              <IconIcon
                className={classNames(projectcss.all, sty.svg__akPox)}
                role={"img"}
              />

              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__tHNd)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "30px"
                    : "40px"
                }
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "30px"
                    : "40px"
                }
                loading={"eager"}
                src={{
                  src: "/plasmic/blank_website/images/devynAiIcoNpng.png",
                  fullWidth: 2560,
                  fullHeight: 2048,
                  aspectRatio: undefined
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___4B1Zl
                )}
              >
                {"DEVYN.AI"}
              </div>
            </PlasmicLink__>
            <PlasmicLink__
              data-plasmic-name={"igStack"}
              data-plasmic-override={overrides.igStack}
              className={classNames(projectcss.all, projectcss.a, sty.igStack)}
              component={Link}
              href={"https://www.instagram.com/devynceo/"}
              platform={"nextjs"}
              target={"_blank"}
            >
              <IconIcon
                className={classNames(projectcss.all, sty.svg__vllVa)}
                role={"img"}
              />

              <PlasmicImg__
                alt={""}
                className={classNames(sty.img___7OfEf)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "30px"
                    : "40px"
                }
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "30px"
                    : "40px"
                }
                loading={"eager"}
                src={{
                  src: "/plasmic/blank_website/images/image2.svg",
                  fullWidth: 150,
                  fullHeight: 150,
                  aspectRatio: 1
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xS9Q6
                )}
              >
                {"Instagram"}
              </div>
            </PlasmicLink__>
            <PlasmicLink__
              data-plasmic-name={"twitterStack"}
              data-plasmic-override={overrides.twitterStack}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.twitterStack
              )}
              component={Link}
              href={"https://twitter.com/devynceo"}
              platform={"nextjs"}
              target={"_blank"}
            >
              <IconIcon
                className={classNames(projectcss.all, sty.svg___8UhY)}
                role={"img"}
              />

              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__jIzs2)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "30px"
                    : "40px"
                }
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "30px"
                    : "40px"
                }
                loading={"eager"}
                src={{
                  src: "/plasmic/blank_website/images/image3.png",
                  fullWidth: 81,
                  fullHeight: 72,
                  aspectRatio: undefined
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__q9Cn
                )}
              >
                {"Twitter"}
              </div>
            </PlasmicLink__>
            <PlasmicLink__
              data-plasmic-name={"linkedInStack"}
              data-plasmic-override={overrides.linkedInStack}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.linkedInStack
              )}
              component={Link}
              href={"https://www.linkedin.com/in/devyngreen/"}
              platform={"nextjs"}
              target={"_blank"}
            >
              <IconIcon
                className={classNames(projectcss.all, sty.svg__pmGIh)}
                role={"img"}
              />

              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__cfBw)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "30px"
                    : "40px"
                }
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "30px"
                    : "40px"
                }
                loading={"eager"}
                src={{
                  src: "/plasmic/blank_website/images/image4.png",
                  fullWidth: 72,
                  fullHeight: 72,
                  aspectRatio: undefined
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__oOkQo
                )}
              >
                {"LinkedIn"}
              </div>
            </PlasmicLink__>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "devynStack", "igStack", "twitterStack", "linkedInStack"],
  devynStack: ["devynStack"],
  igStack: ["igStack"],
  twitterStack: ["twitterStack"],
  linkedInStack: ["linkedInStack"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  devynStack: "a";
  igStack: "a";
  twitterStack: "a";
  linkedInStack: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    devynStack: makeNodeComponent("devynStack"),
    igStack: makeNodeComponent("igStack"),
    twitterStack: makeNodeComponent("twitterStack"),
    linkedInStack: makeNodeComponent("linkedInStack"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Devyn Green | Founder of DEVYN.AI",
      description: "The official site for Devyn Green. ",
      ogImageSrc:
        "https://site-assets.plasmic.app/888a0bf86f62d00c96d65d3cb02362d6.png",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
